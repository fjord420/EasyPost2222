/**
 * Planning Agent
 * Specializes in system architecture and technical planning
 */

import { subscribeAgent, completeMessage, failMessage, sendMessage } from '../shared/communication/message-queue.js';
import { AgentType, MessageType, Task, AgentBase } from '../shared/types/index.js';
import { PLANNING_PROMPT } from './prompt.js';

class PlanningAgent extends AgentBase {
  constructor() {
    super(AgentType.PLANNING, 'Planning Agent');
    this.activeTasks = new Map();
  }

  async start() {
    console.log('üèóÔ∏è  Planning Agent starting...');
    console.log('üìã Capabilities:', this.capabilities.join(', '));

    // Subscribe to messages
    subscribeAgent(AgentType.PLANNING, async (message) => {
      await this.handleMessage(message);
    });

    console.log('‚úÖ Planning Agent ready!');
    console.log('‚è≥ Waiting for tasks...\n');
  }

  async handleMessage(message) {
    console.log(`\nüì® Received ${message.type} from ${message.from}`);
    console.log(`   Task: ${message.payload.task || message.payload.query}`);

    this.setStatus('busy');

    try {
      let response;

      switch (message.type) {
        case MessageType.TASK:
          response = await this.handleTask(message);
          break;
        case MessageType.QUERY:
          response = await this.handleQuery(message);
          break;
        default:
          throw new Error(`Unknown message type: ${message.type}`);
      }

      // Send response back
      await sendMessage({
        from: AgentType.PLANNING,
        to: message.from,
        type: MessageType.RESPONSE,
        payload: response,
        conversationId: message.conversationId,
      });

      completeMessage(message.id, response);
      console.log('‚úÖ Task completed successfully');

    } catch (error) {
      console.error('‚ùå Error handling message:', error.message);

      await sendMessage({
        from: AgentType.PLANNING,
        to: message.from,
        type: MessageType.ERROR,
        payload: { error: error.message },
        conversationId: message.conversationId,
      });

      failMessage(message.id, error.message);
    } finally {
      this.setStatus('idle');
    }
  }

  async handleTask(message) {
    const { task, details, context } = message.payload;

    console.log(`\nüéØ Executing: ${task}`);
    console.log(`   Context:`, JSON.stringify(context, null, 2));

    // Create a prompt for Claude based on the task
    const prompt = this.buildPrompt(task, details, context);

    // Here you would call Claude API or use Claude Code Task tool
    // For now, we'll return a structured response
    const result = await this.executeWithClaude(prompt, task);

    return {
      task,
      result,
      agent: AgentType.PLANNING,
      completedAt: Date.now(),
    };
  }

  async handleQuery(message) {
    const { query, context } = message.payload;

    console.log(`\n‚ùì Query: ${query}`);

    // Build and execute query
    const prompt = `${PLANNING_PROMPT}\n\nQuery: ${query}\nContext: ${JSON.stringify(context)}`;
    const answer = await this.executeWithClaude(prompt, query);

    return {
      query,
      answer,
      agent: AgentType.PLANNING,
    };
  }

  buildPrompt(task, details, context) {
    return `${PLANNING_PROMPT}

## Task
${task}

## Details
${JSON.stringify(details, null, 2)}

## Context
${JSON.stringify(context, null, 2)}

## Instructions
Please provide a detailed, structured response that includes:
1. High-level architecture overview
2. Technology stack recommendations
3. Database schema (if applicable)
4. API endpoints specification (if applicable)
5. Development roadmap with phases
6. Potential challenges and solutions

Format your response as structured JSON for easy parsing.
`;
  }

  async executeWithClaude(prompt, taskName) {
    // This is where we integrate with Claude
    // Options:
    // 1. Use Claude API directly
    // 2. Use Claude Code's Task tool to delegate to a sub-agent
    // 3. Use a pre-configured Claude instance

    console.log(`\nü§î Planning: ${taskName}...`);

    // For demo purposes, return structured planning data
    // In production, this would call Claude API
    return this.generatePlanningOutput(taskName);
  }

  generatePlanningOutput(taskName) {
    // Demo planning output
    // In production, this would be generated by Claude

    if (taskName.toLowerCase().includes('architecture')) {
      return {
        architecture: {
          overview: 'Full-stack Next.js application with EasyPost integration',
          layers: [
            'Frontend: Next.js with Builder.io and Tailwind CSS',
            'API Layer: Next.js API routes with Express middleware',
            'Business Logic: Service layer for shipping operations',
            'Data Layer: PostgreSQL with Prisma ORM',
            'External: EasyPost API integration',
          ],
          patterns: ['MVC', 'Repository Pattern', 'Service Layer'],
        },
        technologyStack: {
          frontend: ['Next.js 14', 'React', 'Builder.io', 'Tailwind CSS', 'TypeScript'],
          backend: ['Next.js API Routes', 'Express.js', 'Node.js'],
          database: ['PostgreSQL', 'Prisma'],
          external: ['EasyPost API', 'Figma API'],
          devTools: ['ESLint', 'Prettier', 'Husky', 'Jest'],
        },
        databaseSchema: {
          tables: [
            {
              name: 'users',
              fields: ['id', 'email', 'name', 'created_at', 'updated_at'],
            },
            {
              name: 'shipments',
              fields: ['id', 'user_id', 'easypost_id', 'tracking_code', 'status', 'created_at'],
            },
            {
              name: 'addresses',
              fields: ['id', 'user_id', 'street1', 'street2', 'city', 'state', 'zip', 'country'],
            },
          ],
        },
        apiEndpoints: [
          { method: 'POST', path: '/api/shipments', description: 'Create new shipment' },
          { method: 'GET', path: '/api/shipments/:id', description: 'Get shipment details' },
          { method: 'POST', path: '/api/addresses/validate', description: 'Validate address' },
          { method: 'GET', path: '/api/rates', description: 'Get shipping rates' },
        ],
        roadmap: [
          { phase: 1, title: 'Foundation', tasks: ['Setup project', 'Database design', 'Auth implementation'] },
          { phase: 2, title: 'Core Features', tasks: ['EasyPost integration', 'Shipment creation', 'Address validation'] },
          { phase: 3, title: 'UI Development', tasks: ['Dashboard', 'Shipment forms', 'Tracking view'] },
          { phase: 4, title: 'Polish', tasks: ['Testing', 'Documentation', 'Deployment'] },
        ],
      };
    }

    return {
      plan: `Planning output for: ${taskName}`,
      recommendations: ['Recommendation 1', 'Recommendation 2'],
      nextSteps: ['Step 1', 'Step 2'],
    };
  }
}

// Run the agent if executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
  const agent = new PlanningAgent();
  agent.start().catch(console.error);
}

export default PlanningAgent;
